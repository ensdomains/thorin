import { createSprinkles, defineProperties } from '@vanilla-extract/sprinkles'

import { commonVars, modeVars } from './theme.css'

const colorPropertiesObject = { ...modeVars.color, inherit: 'inherit', initial: 'initial', unset: 'unset' }

const colorProperties = defineProperties({
  conditions: {
    base: {},
    hover: { selector: '&:hover' },
    active: { selector: '&:active' },
    readonly: { selector: '&:read-only' },
    checked: { selector: '&:checked' },
    disabled: { selector: '&:disabled' }, // keep this last, last has precedence
  },
  defaultCondition: 'base',
  properties: {
    color: colorPropertiesObject,
    background: colorPropertiesObject,
    backgroundColor: colorPropertiesObject,
    borderColor: colorPropertiesObject,
  },
})

const responsivePropeties = defineProperties({
  conditions: {
    base: {},
    xs: { '@media': 'screen and (min-width: 360px)' },
    sm: { '@media': 'screen and (min-width: 640px)' },
    md: { '@media': 'screen and (min-width: 768px)' },
    lg: { '@media': 'screen and (min-width: 1024px)' },
    xl: { '@media': 'screen and (min-width: 1280px)' },
  },
  defaultCondition: 'base',
  properties: {
    alignSelf: ['flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'inherit'],
    alignItems: ['flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'inherit'],
    justifySelf: ['flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'inherit'],
    justifyContent: ['flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'inherit'],
    display: ['none', 'block', 'flex', 'inline-block', 'grid', 'table', 'inherit'],
    flexDirection: ['row', 'row-reverse', 'column', 'column-reverse', 'inherit'],
    flex: [1, '0 0 1px', 'auto', 'initial', 'none', 'inherit'],
    flexShrink: [0, 1, 2, 'inherit'],
    flexGrow: [0, 2, 'initial', 'unset', 'inherit'],
    flexBasis: commonVars.space,
    flexWrap: ['wrap', 'nowrap', 'wrap-reverse', 'initial', 'inherit'],
  },
})

const staticProperties = defineProperties({
  conditions: { base: {} },
  defaultCondition: 'base',
  properties: {
    textAlign: ['center', 'left', 'right', 'justify', 'initial', 'inherit'],
    fontFamily: commonVars.fonts,
    fontWeight: commonVars.fontWeights,
    fontSize: commonVars.fontSizes,
    lineHeight: commonVars.lineHeights,
    overflow: ['hidden', 'visible', 'scroll', 'auto', 'initial', 'inherit'],
    textOverflow: ['clip', 'ellipsis', 'initial', 'inherit'],
    whiteSpace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'initial', 'inherit'],
    textTransform: ['capitalize', 'uppercase', 'lowercase', 'none', 'initial', 'inherit'],
  },
})

// TODO: Review order of properties. More specific properties should come last.
// const staticProperties = defineProperties({
//   conditions: {
//     hover: { selector: '&:hover' },
//   } as const,
//   defaultCondition: 'base',
//   properties: {
//     gap: commonVars.space,
//     gridTemplateColumns: true,
//     padding: commonVars.space,
//     paddingLeft: commonVars.space,
//     paddingRight: commonVars.space,
//     paddingTop: commonVars.space,
//     paddingBottom: commonVars.space,
//     height: commonVars.space,
//     ,
//     fontSize: commonVars.fontSizes,
//     fontStyle: true,
//     fontFeatureSettings: true,
//     ,
//     lineHeight: commonVars.lineHeights,
//     textAlign: true,
//     translate: true,
//     textOverflow: true,
//     zIndex: true,
//     position: true,
//     transform: true,
//     top: commonVars.space,
//     left: commonVars.space,
//     right: commonVars.space,
//     bottom: commonVars.space,
//     verticalAlign: true,
//     margin: commonVars.space,
//     marginBottom: commonVars.space,
//     marginLeft: commonVars.space,
//     marginRight: commonVars.space,
//     marginTop: commonVars.space,
//     overflowX: true,
//     overflowY: true,
//     overflowWrap: true,
//     width: commonVars.space,
//     maxWidth: commonVars.space,
//     minWidth: commonVars.space,
//     maxHeight: commonVars.space,
//     minHeight: commonVars.space,
//     whiteSpace: true,
//     strokeWidth: commonVars.space,
//     stroke: modeVars.color,
//     outline: true,
//     resize: true,
//     textTransform: true,
//     wordBreak: true,
//     order: true,
//     touchAction: true,
//     backgroundImage: true,
//     transition: true,
//     boxShadow: true,
//     visibility: true,
//     appearance: true,
//     boxSizing: true,
//     animation: true,
//     animationName: true,
//     animationDuration: true,
//     animationTimingFunction: true,
//     animationDelay: true,
//     animationIterationCount: true,
//     animationDirection: true,
//     filter: true,
//     placeContent: true,
//     maskImage: true,
//     maskRepeat: true,
//     maskPosition: true,
//     border: true,
//     borderWidth: commonVars.borderWidths,
//     borderStyle: true,
//     borderColor: modeVars.color,
//     borderRadius: commonVars.radii,
//     borderSpacing: true,
//     borderLeft: true,
//     borderRight: true,
//     borderTop: true,
//     borderBottom: true,
//     borderBottomColor: modeVars.color,
//     borderLeftColor: modeVars.color,
//     borderRightColor: modeVars.color,
//     borderTopColor: modeVars.color,
//     borderTopLeftRadius: commonVars.radii,
//     borderTopRightRadius: commonVars.radii,
//     borderBottomLeftRadius: commonVars.radii,
//     borderBottomRightRadius: commonVars.radii,
//     objectFit: true,
//     fill: true,
//     cursor: true,
//     opacity: true,
//     pointerEvents: true,
//     backdropFilter: true,
//     transitionTimingFunction: commonVars.transitionTimingFunction,
//     transitionDuration: commonVars.transitionDuration,
//     transitionProperty: true,
//   },
//   shorthands: {
//     bg: ['backgroundColor'],
//     p: ['padding'],
//     pl: ['paddingLeft'],
//     pr: ['paddingRight'],
//     pt: ['paddingTop'],
//     pb: ['paddingBottom'],
//     paddingX: ['paddingLeft', 'paddingRight'],
//     paddingY: ['paddingTop', 'paddingBottom'],
//     px: ['paddingLeft', 'paddingRight'],
//     py: ['paddingTop', 'paddingBottom'],
//     placeItems: ['alignItems', 'justifyContent'],
//     typeSize: ['fontSize', 'lineHeight'],
//     m: ['margin'],
//     mr: ['marginRight'],
//     ml: ['marginLeft'],
//     mt: ['marginTop'],
//     mb: ['marginBottom'],
//     marginX: ['marginLeft', 'marginRight'],
//     marginY: ['marginTop', 'marginBottom'],
//     mx: ['marginLeft', 'marginRight'],
//     my: ['marginTop', 'marginBottom'],
//     hw: ['height', 'width'],
//     wh: ['width', 'height'],
//     overflow: ['overflowX', 'overflowY'],
//   },
// })

export const sprinkles = createSprinkles(responsivePropeties, colorProperties, staticProperties)

export type Sprinkles = Parameters<typeof sprinkles>[0]
